from os import *
from sys import *
from collections import *
from math import *

def getInversions(arr, n) :
	# Write your code here.
    def merge(arr, temp_arr, left, mid, right):
        i = left # Starting index of left subarray
        j = mid+1 # Starting index of right subarray
        k = left # Starting index to be sorted
        inv_count = 0

        while i<= mid and j <=right:
            if arr[i] <= arr[j]:
                temp_arr[k] = arr[i]
                i+=1
            else:
                temp_arr[k] = arr[j]
                inv_count += (mid -i +1)
                j +=1
            k+=1

        while i<=mid: # Remaining elements in left
            temp_arr[k] = arr[i]
            i +=1
            k += 1

        while j <=right:
            temp_arr[k] = arr[j]
            j +=1
            k += 1
        
        #Copy sorted array into original array
        
        for i in range( left, right+1):
            arr[i] = temp_arr[i]
        return inv_count

    def mergeSort(arr, temp_arr, left, right):
        inv_count = 0
        if left < right:
            mid = (left+right) //2

            inv_count += mergeSort(arr, temp_arr, left, mid)
            inv_count += mergeSort(arr, temp_arr, mid + 1, right)

            inv_count += merge(arr, temp_arr, left, mid, right)

        return inv_count
    
    # Create a temporary array
    temp_arr = [0] * n
    # Call mergeSort and return the inversion count
    return mergeSort(arr, temp_arr, 0, n - 1)

	
# Taking inpit using fast I/O.
def takeInput() :
    n = int(input())
    arr = list(map(int, stdin.readline().strip().split(" ")))
    return arr, n

# Main.
arr, n = takeInput()
print(getInversions(arr, n))
